import random

table = [
    ["Коллеги,", "парадигма цифровой экономики", "открывает новые возможности для", "дальнейшего углубления", "знаний и компетенций."],
    ["В то же время,", "контекст цифровой трансформации", "выдвигает новые требования", "бюджетного финансирования", "непроверенных гипотез."],
    ["Однако,", "диджитализация бизнес-процессов", "несёт в себе риски", "синергетического эффекта", "волатильных активов."],
    ["Тем не менее,", "прагматичный подход к цифровым платформам", "расширяет горизонты", "компрометации конфиденциальных", "опасных экспериментов."],
    ["Следовательно,", "совокупность сквозных технологий", "заставляет искать варианты", "универсальной коммодитизации", "государственно-частных партнёрств."],
    ["Соответственно,", "программа прорывных исследований", "не оставляет шанса для", "несанкционированной кастомизации", "цифровых следов граждан."],
    ["Вместе с тем,", "ускорение блокчейн-транзакций", "повышает вероятность", "нормативного регулирования", "нежелательных последствий."],
    ["С другой стороны,", "экспоненциальный рост Big Data", "обостряет проблему", "практического применения", "внезапных открытий."]
]

def generate_unique_sentence( table, used_combinations ) :
    while True :
        # Случайный выбор строки из таблицы
        row = random.choice( table )

        # Формирование предложения
        sentence = f"{row[ 0 ]} {row[ 1 ]} {row[ 2 ]} {row[ 3 ]} {row[ 4 ]}"

        # Проверка на уникальность
        if sentence not in used_combinations :
            used_combinations.add( sentence )
            return sentence


def generate_speech( table, num_sentences=5 ) :
    used_combinations = set( )
    speech = [ ]

    for _ in range( num_sentences ) :
        sentence = generate_unique_sentence( table, used_combinations )
        speech.append( sentence )

    return "\n".join( speech )


# Пример использования
print( generate_speech( table ) )